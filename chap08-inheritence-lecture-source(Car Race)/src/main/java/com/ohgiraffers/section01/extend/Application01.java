package com.ohgiraffers.section01.extend;

public class Application01 {

    public static void main(String[] args) {

        /*
        * 상속(inheritance)은 현실 세계의 상속과 비슷함
        * 부모가 가지고 있는 재산(클래스가 가지는 멤버)을 자식이 물려받는 의미이다
        * 클래스 또한 부모클래스와 자식클래스로 역할을 나누어서 부모가 가지는 멤버를 자식이 물려받아
        * 자기의 멤바인 것처럼 사용할 수 있도록 만든 기술이다
        *
        * 하지만 단순 물려받는 개념보다 더 나아가면 자바에서 상속은 부모클래스의 확장(extend)의 개념을 가진다
        * 물려 받아서 자산의 것 처럼 사용하는 것 뿐 아니라 추가적인 멤버도 작성이 가능하다
        * 특히 메소드 재정의(overriding)라는 기술을 이용해서 부모가 가진 메소드를 재정의 하는 것도 가능
        *
        * 상속사용시 이점 두가지
        * 1. 새로운 클래스를 작성시 기존에 작성한 클래스를 재사용 가능하다
        * 1-1 재사용시 생산성 크게 향상
        * 1-2 공통적으로 사용하는 코드가 부모클래스에 존재하면 수정사항이 생길 시
        * 부모 클래스만 수정해도 전체적으로 적용
        * 2. 클래스간의 계층 관계사 형성 다형성의 문법적인 토대가 됨
        *
        * 객체지향 설계 관점에서 바라보는 상속
        * 모든 객체는 자신이 수신한 메세지에 대해 응답을 해야 하는 책임을 가지며 그 책임의 규모는 적절해야한다
        * 적절한 책임을 가진 객체들이 서로 협력(메세지 수신과 응답)을 통해 프로그램이 동작하는 것이
        * 객체지향 프로그램이다
        *
        * 적정한 책임을 수행하는 객체 또한 그 객체만 수행할 수 있는 기능이라기 보다 역할의 관점으로 봐라봐야한다
        * 역할이란 동일한 동작을 수행하는 것을 정의한 것이며 대체 가능성을 의미한다
        * 부모클래스를 추상화하는 경우에는 역학의 관점으로 바라봐야한다
        * 그래야 자식클래스로 생성한 객체들이 서로 역할을 수행해가며 유연한 코드를 작성할 수 있게 된다
        *
        * 동일한 역할을 가지는 모든 객체는 동일한 메세지를 수신하기는 하지만
        * 객체별로 그 메세지에 응답하는 방식은 서로 다를 수 있다(다형성)
        * */
        Car car = new Car();

        car.soundHorn();
        car.run();
        car.soundHorn();
        car.stop();
        car.soundHorn();

        /*
        * 상속은 재사용이라는 장점만 바라보게 되면 오용의 가능성이 있기 때문에 유지보수에 좋지 않는 코드를 작성할
        * 확률이 높다--> 상속은 IS-A(~는~이다)관계로 구분되는 경우에만 사용해야한다
        *
        * */
        System.out.println("======FireCar==========");
        FireCar fireCar = new FireCar();
        fireCar.soundHorn();
        fireCar.run();
        fireCar.soundHorn();
        fireCar.stop();
        fireCar.soundHorn();
        fireCar.sprayWater();

        System.out.println("RacingCar===========");
        RacingCar racingCar = new RacingCar();





    }
}
